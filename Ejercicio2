# -*- coding: utf-8 -*-
"""
Created on Sat Mar 21 15:32:33 2020

@author: waziri
"""

from math import *
import sys

flattened_list = []

def isdigit(L):
    result = False
    
    for i in L:
        try:
           val = int(i)
           result = True
        except ValueError:
          try:
              val = float(i)
              result = True
          except ValueError:
              return False        
    return result


def myLength(L):
    print("-------------- ", sys._getframe().f_code.co_name," --------------")
    return len(L)
    
def myMaximum(L):
    print("-------------- ", sys._getframe().f_code.co_name," --------------")
    return max(L)

def average(L):
    print("-------------- ", sys._getframe().f_code.co_name," --------------")
    if(len(L) > 0):
        return sum(L)/len(L) if (isdigit(L) == True) else None
     
    else:
        return None

def buildPalindrome(L):
    return

def remove(L1, L2):
    print("-------------- ", sys._getframe().f_code.co_name," --------------")                   
    return [i for i in L1 if i not in L2]

def flatten(L):
    print("-------------- ", sys._getframe().f_code.co_name," --------------")
    for i in L:
        if(isinstance(i, list) == True):
            flatten(i)
        else:
            flattened_list.append(i)
    
    return flattened_list

def oddsNevens(L):
    print("-------------- ", sys._getframe().f_code.co_name," --------------")
    odd_list = []
    even_list = []
    for i in L:
        if (i % 2) == 0:
            even_list.append(i)
        else:
            odd_list.append(i)
    return odd_list, even_list

def primeDivisors(n):
    print("-------------- ", sys._getframe().f_code.co_name," --------------")
    prime_divisor = []
    
    if n > 0:
        while n % 2 == 0: 
           prime_divisor.append(2)
           n = n / 2
        
        for i in range(3, int(sqrt(n))+1, 2): 
            while n % i == 0: 
                prime_divisor.append(i) 
                n = n / i
        
        if n > 2: 
            prime_divisor.append(n)
        
    return prime_divisor

def is_increasing(L):
    print("-------------- ", sys._getframe().f_code.co_name," --------------")
    bool_is_increasing = []
    counter = 1
    for i in L:
        if(counter < len(L)):
            if(i <= L[counter]):
                bool_is_increasing.append(True)
            else:
                bool_is_increasing.append(False)
            
            counter = counter + 1
        else:
            bool_is_increasing.append(False)
            
    return bool_is_increasing
        


my_list_test = [2,4,8,5,6]
my_list_test_1 = [8,6,7,2]

removeL1 = [2,2,4,8,5,6]
removeL2 = [8,5,1,3,9,2]
list_to_flatten = [[2,4,8,5,6], 4, [8,6,7,2], [2,2,4,8,5,6], 5]

print(myLength(my_list_test))
print(myMaximum(my_list_test))
print(average(my_list_test))
print(is_increasing(my_list_test))
print(primeDivisors(500))
print(oddsNevens(my_list_test))
print(remove(removeL1, removeL2))
print(flatten(list_to_flatten))
